package _01_createional_patterns._04_bulider._02_after;


import _01_createional_patterns._04_bulider._01_before.TourPlan;

public class App {
    /*
    * Builder Pattern
    * - 객체 생성을 단순화하고 가독성을 향상시키기 위한 패턴이며 객체 생성이 복잡하거나,
    *   생성자만 사용할 때 생기는 문제를 해결하기 위해 사용되는 패턴이다.
    *
    * ## Builder Pattern 필요한 경우
    * - 많은 수의 매개변수가 필요한 경우
    * -> 많은 수의 매개변수를 가진 생성자를 사용하면 코드를 읽기
    *    어렵기 때문에 빌더 패턴을 사용한다.
    *
    * - 객체의 속성이 일부는 필수이고 나머지는 선택적인 경우
    * -> 객체의 일부 속성은 필수적이지만 나머지는 선택적일 때 빌더 패턴을
    *    사용하면 효과적입니다. 빌더 패턴을 사용하면 필수 속성을 먼저 설정하고,
    *    선택적 속성을 필요한 만큼 추가할 수 있습니다.
    *
    * - 불변 객체를 생성해야 하는 경우
    * -> 내부 객체를 변경할 수  없게 만들 때 사용한다.
    *
    * - 객체의 생성 과정이 복잡한 경우
    * -> 객체가 여러 단계로 생성되어야 하거나 객체 생성에 복잡한 로직이 필요한 경우
    *    빌더 패턴을 사용할 수 있습니다. 이는 생성 로직을 빌더 클래스 내부에 캡슐화하여
    *    객체 생성을 단순화합니다.
    *
    * - 가독성이 중요한 경우
    * -> 빌더 패턴은 코드를 읽기 쉽고 명확하게 만든다.
    *
    * - 객체 생성 과정에 유효성 검사가 필요한 경우
    * -> 빌더 패턴을 사용하면 객체 생성 과정에서 유효성 검사를 수행할 수 있습니다.
    *    필수 속성이나 설정 값이 빠지지 않았는지 확인하거나, 올바른 값인지 검증하는
    *    로직을 빌더 클래스에 포함시킬 수 있습니다.
    *
    * - 빌더 패턴은 이러한 상황들에서 객체 생성을 간소화하고, 가독성을 높이며,
    *   유지보수를 용이하게 만듭니다.
    *
    * ## 적용 방법
    * 1. 빌더 클래스 생성
    * -> 빌더 객체를 만들기 위한 인터페이스를 정의하고 빌더를 구체적으로 구현할 클래스 생성한다.
    * 2. 빌더 메서드 정의
    * -> 객체를 생성하는 데 필요한 매개변수들을 멤버 변수로 사용하고 인터페이스에 정의한 메소드를 구현한다.
    * 3. 빌더 객체 사용
    * -> 클라이언트 코드에서 빌더 객체를 생성하고 필요한 속성을 빌더 객체의 메소드를 사용하여
    *    설정하고 속성이 설정이 끝난 객체를 불러오는 메소드를 호출하여 생성한다.
    * */
    public static void main(String[] args) {
        TourDirector director = new TourDirector(new DefaultTourBuilder2().newInstance());
        TourPlan tourPlan = director.cancunTrip();
        TourPlan tourPlan1 = director.longBeachTrip();
    }
}
